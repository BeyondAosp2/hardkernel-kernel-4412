/*
 * Samsung S5P Multi Format Codec v 5.0
 *
 * This file contains description of formats used by MFC and cotrols
 * used by the driver.
 *
 * Copyright (c) 2010 Samsung Electronics Co., Ltd.
 * Kamil Debski, <k.debski@samsung.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by the
 * Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version
 */

#ifndef S5P_MFC_CTRLS_H_
#define S5P_MFC_CTRLS_H_

#include <media/v4l2-ioctl.h>
#include "regs-mfc5.h"

#define MFC_FMT_DEC	0
#define MFC_FMT_ENC	1
#define MFC_FMT_RAW	2

struct s5p_mfc_fmt {
	char *name;
	u32 fourcc;
	u32 codec_mode;
	u32 type;
	u32 num_planes;
};

#define MFC_FORMATS_NO_CODEC -1

#define DEC_DEF_SRC_FMT	2
#define DEC_DEF_DST_FMT	0
#define ENC_DEF_SRC_FMT	1
#define ENC_DEF_DST_FMT	3

static struct s5p_mfc_fmt formats[] = {
	{
	.name = "4:2:0 2 Planes 64x32 Tiles",
	.fourcc = V4L2_PIX_FMT_NV12MT,
	.codec_mode = MFC_FORMATS_NO_CODEC,
	.type = MFC_FMT_RAW,
	.num_planes = 2,
	 },
	{
	.name = "4:2:0 2 Planes",
	.fourcc = V4L2_PIX_FMT_NV12,
	.codec_mode = MFC_FORMATS_NO_CODEC,
	.type = MFC_FMT_RAW,
	.num_planes = 2,
	},
	{
	.name = "H264 Encoded Stream",
	.fourcc = V4L2_PIX_FMT_H264,
	.codec_mode = S5P_FIMV_CODEC_H264_DEC,
	.type = MFC_FMT_DEC,
	.num_planes = 1,
	},
	{
	.name = "H264 Encoded Stream",
	.fourcc = V4L2_PIX_FMT_H264,
	.codec_mode = S5P_FIMV_CODEC_H264_ENC,
	.type = MFC_FMT_ENC,
	.num_planes = 1,
	},
	{
	.name = "H263 Encoded Stream",
	.fourcc = V4L2_PIX_FMT_H263,
	.codec_mode = S5P_FIMV_CODEC_H263_DEC,
	.type = MFC_FMT_DEC,
	.num_planes = 1,
	},
	{
	.name = "MPEG1/MPEG2 Encoded Stream",
	.fourcc = V4L2_PIX_FMT_MPEG12,
	.codec_mode = S5P_FIMV_CODEC_MPEG2_DEC,
	.type = MFC_FMT_DEC,
	.num_planes = 1,
	},
	{
	.name = "MPEG4 Encoded Stream",
	.fourcc = V4L2_PIX_FMT_MPEG4,
	.codec_mode = S5P_FIMV_CODEC_MPEG4_DEC,
	.type = MFC_FMT_DEC,
	.num_planes = 1,
	},
	{
	.name = "DivX Encoded Stream",
	.fourcc = V4L2_PIX_FMT_DIVX,
	.codec_mode = S5P_FIMV_CODEC_MPEG4_DEC,
	.type = MFC_FMT_DEC,
	.num_planes = 1,
	},
	{
	.name = "DivX 3.11 Encoded Stream",
	.fourcc = V4L2_PIX_FMT_DIVX3,
	.codec_mode = S5P_FIMV_CODEC_DIVX311_DEC,
	.type = MFC_FMT_DEC,
	.num_planes = 1,
	},
	{
	.name = "DivX 4.12 Encoded Stream",
	.fourcc = V4L2_PIX_FMT_DIVX4,
	.codec_mode = S5P_FIMV_CODEC_DIVX412_DEC,
	.type = MFC_FMT_DEC,
	.num_planes = 1,
	},
	{
	.name = "DivX 5.00-5.02 Encoded Stream",
	.fourcc = V4L2_PIX_FMT_DIVX500,
	.codec_mode = S5P_FIMV_CODEC_DIVX502_DEC,
	.type = MFC_FMT_DEC,
	.num_planes = 1,
	},
	{
	.name = "DivX 5.03 Encoded Stream",
	.fourcc = V4L2_PIX_FMT_DIVX503,
	.codec_mode = S5P_FIMV_CODEC_DIVX503_DEC,
	.type = MFC_FMT_DEC,
	.num_planes = 1,
	},
	{
	.name = "XviD Encoded Stream",
	.fourcc = V4L2_PIX_FMT_XVID,
	.codec_mode = S5P_FIMV_CODEC_MPEG4_DEC,
	.type = MFC_FMT_DEC,
	.num_planes = 1,
	},
	{
	.name = "VC1 Encoded Stream",
	.fourcc = V4L2_PIX_FMT_VC1,
	.codec_mode = S5P_FIMV_CODEC_VC1_DEC,
	.type = MFC_FMT_DEC,
	.num_planes = 1,
	},
	{
	.name = "VC1 RCV Encoded Stream",
	.fourcc = V4L2_PIX_FMT_VC1_RCV,
	.codec_mode = S5P_FIMV_CODEC_VC1RCV_DEC,
	.type = MFC_FMT_DEC,
	.num_planes = 1,
	},
};

#define NUM_FORMATS ARRAY_SIZE(formats)

static struct v4l2_queryctrl s5p_mfc_ctrls[] = {
/* For decoding */
	{
	.id = V4L2_CID_CODEC_DISPLAY_DELAY,
	.type = V4L2_CTRL_TYPE_INTEGER,
	.name = "",
	.minimum = 0,
	.maximum = 16383,
	.step = 1,
	.default_value = 0,
	},
	{
	.id = V4L2_CID_CODEC_LOOP_FILTER_MPEG4_ENABLE,
	.type = V4L2_CTRL_TYPE_BOOLEAN,
	.name = "Mpeg4 Loop Filter Enable",
	.minimum = 0,
	.maximum = 1,
	.step = 1,
	.default_value = 0,
	},
	{
	.id = V4L2_CID_CODEC_SLICE_INTERFACE,
	.type = V4L2_CTRL_TYPE_BOOLEAN,
	.name = "Slice Interface Enable",
	.minimum = 0,
	.maximum = 1,
	.step = 1,
	.default_value = 0,
	},
/* For encoding */
	{
		.id = V4L2_CID_CODEC_MFC5X_ENC_GOP_SIZE,
		.type = V4L2_CTRL_TYPE_INTEGER,
		.name = "The period of intra frame",
		.minimum = 0,
		.maximum = (1 << 16) - 1,
		.step = 1,
		.default_value = 0,
	},
	{
		.id = V4L2_CID_CODEC_MFC5X_ENC_MULTI_SLICE_MODE,
		.type = V4L2_CTRL_TYPE_INTEGER,
		.name = "The slice partitioning method",
		.minimum = 0,
		.maximum = 3,
		.step = 1,
		.default_value = 0,
	},
	{
		.id = V4L2_CID_CODEC_MFC5X_ENC_MULTI_SLICE_MB,
		.type = V4L2_CTRL_TYPE_INTEGER,
		.name = "The number of MB in a slice",
		.minimum = 1,
		.maximum = (1 << 16) - 1,
		.step = 1,
		.default_value = 1,
	},
	{
		.id = V4L2_CID_CODEC_MFC5X_ENC_MULTI_SLICE_BIT,
		.type = V4L2_CTRL_TYPE_INTEGER,
		.name = "The maximum bits per slices",
		.minimum = 1900,
		.maximum = (~0U),
		.step = 1,
		.default_value = 1900,
	},
	{
		.id = V4L2_CID_CODEC_MFC5X_ENC_INTRA_REFRESH_MB,
		.type = V4L2_CTRL_TYPE_INTEGER,
		.name = "The number of intra refresh MBs",
		.minimum = 0,
		.maximum = (1 << 16) - 1,
		.step = 1,
		.default_value = 0,
	},
	{
		.id = V4L2_CID_CODEC_MFC5X_ENC_PAD_CTRL_ENABLE,
		.type = V4L2_CTRL_TYPE_BOOLEAN,
		.name = "Padding control enable",
		.minimum = 0,
		.maximum = 1,
		.step = 1,
		.default_value = 0,
	},
	{
		.id = V4L2_CID_CODEC_MFC5X_ENC_PAD_LUMA_VALUE,
		.type = V4L2_CTRL_TYPE_INTEGER,
		.name = "Y image's padding value",
		.minimum = 0,
		.maximum = 255,
		.step = 1,
		.default_value = 0,
	},
	{
		.id = V4L2_CID_CODEC_MFC5X_ENC_PAD_CB_VALUE,
		.type = V4L2_CTRL_TYPE_INTEGER,
		.name = "Cb image's padding value",
		.minimum = 0,
		.maximum = 255,
		.step = 1,
		.default_value = 0,
	},
	{
		.id = V4L2_CID_CODEC_MFC5X_ENC_PAD_CR_VALUE,
		.type = V4L2_CTRL_TYPE_INTEGER,
		.name = "Cr image's padding value",
		.minimum = 0,
		.maximum = 255,
		.step = 1,
		.default_value = 0,
	},
	{
		.id = V4L2_CID_CODEC_MFC5X_ENC_RC_FRAME_ENABLE,
		.type = V4L2_CTRL_TYPE_BOOLEAN,
		.name = "Frame level rate control enable",
		.minimum = 0,
		.maximum = 1,
		.step = 1,
		.default_value = 0,
	},
	{
		.id = V4L2_CID_CODEC_MFC5X_ENC_RC_BIT_RATE,
		.type = V4L2_CTRL_TYPE_INTEGER,
		.name = "Target bit rate rate-control",
		.minimum = 1,
		.maximum = (~0U),
		.step = 1,
		.default_value = 1,
	},
	{
		.id = V4L2_CID_CODEC_MFC5X_ENC_RC_REACTION_COEFF,
		.type = V4L2_CTRL_TYPE_INTEGER,
		.name = "Rate control reaction coeff.",
		.minimum = 1,
		.maximum = (1 << 16) - 1,
		.step = 1,
		.default_value = 1,
	},
	{
		.id = V4L2_CID_CODEC_MFC5X_ENC_STREAM_SIZE,
		.type = V4L2_CTRL_TYPE_INTEGER,
		.name = "Encoded stream size",
		.minimum = 0,
		.maximum = (~0U),
		.step = 1,
		.default_value = 0,
		.flags = V4L2_CTRL_FLAG_READ_ONLY,
	},
	{
		.id = V4L2_CID_CODEC_MFC5X_ENC_FRAME_COUNT,
		.type = V4L2_CTRL_TYPE_INTEGER,
		.name = "Encoded frame count",
		.minimum = 0,
		.maximum = (~0U),
		.step = 1,
		.default_value = 0,
		.flags = V4L2_CTRL_FLAG_READ_ONLY,
	},
	{
		.id = V4L2_CID_CODEC_MFC5X_ENC_FRAME_TYPE,
		.type = V4L2_CTRL_TYPE_INTEGER,
		.name = "Encoded frame type",
		.minimum = 0,
		.maximum = 5,
		.step = 1,
		.default_value = 0,
		.flags = V4L2_CTRL_FLAG_READ_ONLY,
	},
	{
		.id = V4L2_CID_CODEC_MFC5X_ENC_FORCE_FRAME_TYPE,
		.type = V4L2_CTRL_TYPE_INTEGER,
		.name = "Force frame type",
		.minimum = 1,
		.maximum = 2,
		.step = 1,
		.default_value = 1,
	},
	{
		.id = V4L2_CID_CODEC_MFC5X_ENC_VBV_BUF_SIZE,
		.type = V4L2_CTRL_TYPE_INTEGER,
		.name = "VBV buffer size (1Kbits)",
		.minimum = 0,
		.maximum = (1 << 16) - 1,
		.step = 1,
		.default_value = 0,
	},
	{
		.id = V4L2_CID_CODEC_MFC5X_ENC_SEQ_HDR_MODE,
		.type = V4L2_CTRL_TYPE_INTEGER,
		.name = "Sequence header mode",
		.minimum = 0,
		.maximum = 1,
		.step = 1,
		.default_value = 0,
	},
	{
		.id = V4L2_CID_CODEC_MFC5X_ENC_FRAME_SKIP_MODE,
		.type = V4L2_CTRL_TYPE_INTEGER,
		.name = "Frame skip enable",
		.minimum = 0,
		.maximum = 2,
		.step = 1,
		.default_value = 0,
	},
	{
		.id = V4L2_CID_CODEC_MFC5X_ENC_RC_FIXED_TARGET_BIT,
		.type = V4L2_CTRL_TYPE_BOOLEAN,
		.name = "Fixed target bit enable",
		.minimum = 0,
		.maximum = 1,
		.step = 1,
		.default_value = 0,
	},
	{
		.id = V4L2_CID_CODEC_MFC5X_ENC_H264_B_FRAMES,
		.type = V4L2_CTRL_TYPE_INTEGER,
		.name = "The number of B frames",
		.minimum = 0,
		.maximum = 2,
		.step = 1,
		.default_value = 0,
	},
	{
		.id = V4L2_CID_CODEC_MFC5X_ENC_H264_PROFILE,
		.type = V4L2_CTRL_TYPE_INTEGER,
		.name = "H264 profile",
		.minimum = 0,
		.maximum = 2,
		.step = 1,
		.default_value = 0,
	},
	{
		.id = V4L2_CID_CODEC_MFC5X_ENC_H264_LEVEL,
		.type = V4L2_CTRL_TYPE_INTEGER,
		.name = "H264 level",
		.minimum = 9,
		.maximum = 40,
		.step = 1,
		.default_value = 9,
	},
	{
		.id = V4L2_CID_CODEC_MFC5X_ENC_H264_INTERLACE,
		.type = V4L2_CTRL_TYPE_BOOLEAN,
		.name = "H264 interface mode",
		.minimum = 0,
		.maximum = 1,
		.step = 1,
		.default_value = 0,
	},
	{
		.id = V4L2_CID_CODEC_MFC5X_ENC_H264_LOOP_FILTER_MODE,
		.type = V4L2_CTRL_TYPE_INTEGER,
		.name = "H264 loop filter mode",
		.minimum = 0,
		.maximum = 2,
		.step = 1,
		.default_value = 0,
	},
	{
		.id = V4L2_CID_CODEC_MFC5X_ENC_H264_LOOP_FILTER_ALPHA,
		.type = V4L2_CTRL_TYPE_INTEGER,
		.name = "H264 loop filter alpha offset",
		.minimum = -6,
		.maximum = 6,
		.step = 1,
		.default_value = 0,
	},
	{
		.id = V4L2_CID_CODEC_MFC5X_ENC_H264_LOOP_FILTER_BETA,
		.type = V4L2_CTRL_TYPE_INTEGER,
		.name = "H264 loop filter beta offset",
		.minimum = -6,
		.maximum = 6,
		.step = 1,
		.default_value = 0,
	},
	{
		.id = V4L2_CID_CODEC_MFC5X_ENC_H264_ENTROPY_MODE,
		.type = V4L2_CTRL_TYPE_INTEGER,
		.name = "H264 entorpy mode",
		.minimum = 0,
		.maximum = 1,
		.step = 1,
		.default_value = 0,
	},
	{
		.id = V4L2_CID_CODEC_MFC5X_ENC_H264_MAX_REF_PIC,
		.type = V4L2_CTRL_TYPE_INTEGER,
		.name = "The max number of ref. picture",
		.minimum = 1,
		.maximum = 2,
		.step = 1,
		.default_value = 2,
	},
	{
		.id = V4L2_CID_CODEC_MFC5X_ENC_H264_NUM_REF_PIC_4P,
		.type = V4L2_CTRL_TYPE_INTEGER,
		.name = "The number of ref. picture of P",
		.minimum = 1,
		.maximum = 2,
		.step = 1,
		.default_value = 1,
	},
	{
		.id = V4L2_CID_CODEC_MFC5X_ENC_H264_8X8_TRANSFORM,
		.type = V4L2_CTRL_TYPE_BOOLEAN,
		.name = "H264 8x8 transform enable",
		.minimum = 0,
		.maximum = 1,
		.step = 1,
		.default_value = 0,
	},
	{
		.id = V4L2_CID_CODEC_MFC5X_ENC_H264_RC_MB_ENABLE,
		.type = V4L2_CTRL_TYPE_BOOLEAN,
		.name = "H264 MB level rate control",
		.minimum = 0,
		.maximum = 1,
		.step = 1,
		.default_value = 0,
	},
	{
		.id = V4L2_CID_CODEC_MFC5X_ENC_H264_RC_FRAME_RATE,
		.type = V4L2_CTRL_TYPE_INTEGER,
		.name = "Frame rate",
		.minimum = 1,
		.maximum = (~0U),
		.step = 1,
		.default_value = 1,
	},
	{
		.id = V4L2_CID_CODEC_MFC5X_ENC_H264_RC_FRAME_QP,
		.type = V4L2_CTRL_TYPE_INTEGER,
		.name = "Frame QP value",
		.minimum = 1,
		.maximum = 51,
		.step = 1,
		.default_value = 1,
	},
	{
		.id = V4L2_CID_CODEC_MFC5X_ENC_H264_RC_MIN_QP,
		.type = V4L2_CTRL_TYPE_INTEGER,
		.name = "Minimum QP value",
		.minimum = 1,
		.maximum = 51,
		.step = 1,
		.default_value = 1,
	},
	{
		/* FIXME: MAX_QP must be greater than or equal to MIN_QP */
		.id = V4L2_CID_CODEC_MFC5X_ENC_H264_RC_MAX_QP,
		.type = V4L2_CTRL_TYPE_INTEGER,
		.name = "Maximum QP value",
		.minimum = 1,
		.maximum = 51,
		.step = 1,
		.default_value = 1,
	},
	{
		.id = V4L2_CID_CODEC_MFC5X_ENC_H264_RC_MB_DARK,
		.type = V4L2_CTRL_TYPE_BOOLEAN,
		.name = "H264 dark region adaptive",
		.minimum = 0,
		.maximum = 1,
		.step = 1,
		.default_value = 0,
	},
	{
		.id = V4L2_CID_CODEC_MFC5X_ENC_H264_RC_MB_SMOOTH,
		.type = V4L2_CTRL_TYPE_BOOLEAN,
		.name = "H264 smooth region adaptive",
		.minimum = 0,
		.maximum = 1,
		.step = 1,
		.default_value = 0,
	},
	{
		.id = V4L2_CID_CODEC_MFC5X_ENC_H264_RC_MB_STATIC,
		.type = V4L2_CTRL_TYPE_BOOLEAN,
		.name = "H264 static region adaptive",
		.minimum = 0,
		.maximum = 1,
		.step = 1,
		.default_value = 0,
	},
	{
		.id = V4L2_CID_CODEC_MFC5X_ENC_H264_RC_MB_ACTIVITY,
		.type = V4L2_CTRL_TYPE_BOOLEAN,
		.name = "H264 MB activity adaptive",
		.minimum = 0,
		.maximum = 1,
		.step = 1,
		.default_value = 0,
	},
	{
		.id = V4L2_CID_CODEC_MFC5X_ENC_H264_RC_P_FRAME_QP,
		.type = V4L2_CTRL_TYPE_INTEGER,
		.name = "P frame QP value",
		.minimum = 1,
		.maximum = 51,
		.step = 1,
		.default_value = 1,
	},
	{
		.id = V4L2_CID_CODEC_MFC5X_ENC_H264_RC_B_FRAME_QP,
		.type = V4L2_CTRL_TYPE_INTEGER,
		.name = "B frame QP value",
		.minimum = 1,
		.maximum = 51,
		.step = 1,
		.default_value = 1,
	},
	{
		.id = V4L2_CID_CODEC_MFC5X_ENC_H264_AR_VUI_ENABLE,
		.type = V4L2_CTRL_TYPE_BOOLEAN,
		.name = "Aspect ratio VUI enable",
		.minimum = 0,
		.maximum = 1,
		.step = 1,
		.default_value = 0,
	},
	{
		.id = V4L2_CID_CODEC_MFC5X_ENC_H264_AR_VUI_IDC,
		.type = V4L2_CTRL_TYPE_INTEGER,
		.name = "VUI aspect ratio IDC",
		.minimum = 0,
		.maximum = 255,
		.step = 1,
		.default_value = 0,
	},
	{
		.id = V4L2_CID_CODEC_MFC5X_ENC_H264_EXT_SAR_WIDTH,
		.type = V4L2_CTRL_TYPE_INTEGER,
		.name = "Horizontal size of SAR",
		.minimum = 0,
		.maximum = (1 << 16) - 1,
		.step = 1,
		.default_value = 0,
	},
	{
		.id = V4L2_CID_CODEC_MFC5X_ENC_H264_EXT_SAR_HEIGHT,
		.type = V4L2_CTRL_TYPE_INTEGER,
		.name = "Vertical size of SAR",
		.minimum = 0,
		.maximum = (1 << 16) - 1,
		.step = 1,
		.default_value = 0,
	},
	{
		.id = V4L2_CID_CODEC_MFC5X_ENC_H264_OPEN_GOP,
		.type = V4L2_CTRL_TYPE_BOOLEAN,
		.name = "Open GOP enable (I-picture)",
		.minimum = 0,
		.maximum = 1,
		.step = 1,
		.default_value = 0,
	},
	{
		.id = V4L2_CID_CODEC_MFC5X_ENC_H264_I_PERIOD,
		.type = V4L2_CTRL_TYPE_INTEGER,
		.name = "H264 I period",
		.minimum = 0,
		.maximum = (1 << 16) - 1,
		.step = 1,
		.default_value = 0,
	},
};

#define NUM_CTRLS ARRAY_SIZE(s5p_mfc_ctrls)

#endif /* S5P_MFC_CTRLS_H_ */

